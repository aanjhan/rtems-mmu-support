#summary Google Summer of Code Pencils down report

= Scope of the Project =

Most modern processors have Memory Management Unit Hardware built into the processor whose main functions are virtual address translation, memory protection and cache control. With RTEMS primarily focused on Embedded Real Time applications, making use of these MMU features especially Memory Protection is important to meet the needs of those applications that requires such support. A general infrastructure for applications to use the MMU for memory protection is intended to be prototyped with a basic proof-of-concept for the PowerPC architecture and PSIM board support package.

  * Requirements to MMU Support Lib needs to be mentioned.

= Major tasks =

  * Understanding the RTEMS source tree structure and the responsibilities of various levels in its architecture.
  * Getting to terms with the PowerPC general register set, MMU hardware architecture and its functional flow.
  * Understanding what parts of the functional flow is performed by the hardware and what needs to be implemented at the Operating System level.
  * Designing a generalised architecture independent method to specify memory address blocks with protection attribute, cache control etc.
  * Low level architecture dependent implementation of MMU support for PSIM BSP with PowerpC 603e series as the base architecture.
  * Testsuite integration that tests for several illegal / dangerous map specifications and also tests low level implementation.


= Design overview =

The design keeps in place the well separated design of RTEMS. The entire implementation is segregated into 2 layers. 
     * Architecture independent API implementation
     * Architecture dependent MMU support implementation

The architecture independent API implementation is placed in the *cpukit* layer of RTEMS. This is the layer where a number of _libxxx_ implementations are present. For e.g. libcsupport, librpc, posix, libnetworking are present. The MMU support lib is called *libmmu* and shall be referenced the same hereon in this document. The architecture specific implementation, here in this project the PowerPC mpc6xx series are placed in the *libcpu/powerpc/mpc6xx* of RTEMS.

http://www.rtems.com/wiki/images/d/d0/Hld_mmu_support.png

=== LibMMU ===
The MMU support lib or libmmu contains general APIs that enables specifying address blocks with type of memory access protection, cache control bits. This information can be used by other layers when needed. A few such scenarios are discussed in the following sections. 

These information are stored in a table called *Access Look Up Table* or *ALUT*. The table is implementated as shown below.


Design description of the modules go in here. Mostly will be pulled in from http://www.rtems.com/wiki/index.php/MMU_Support#Design_Notes


= Accomplished tasks =

List of tasks accomplished.


= Future scope / ideas =

Future tasks and goals are put in here.


= Challenges faced =

A brief description of major challenges faced goes in here. Also solutions used, any alternate solutions shall be mentioned.

= Test suite =

Description of the test suite used